[/
    Copyright (c) 2013-2017 Vinnie Falco (vinnie dot falco at gmail dot com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[library Beast
    [quickbook 1.6]
    [copyright 2013 - 2017 Vinnie Falco]
    [purpose Networking Protocol Library]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
    [authors [Falco, Vinnie]]
    [category template]
    [category generic]
]

[template mdash[] '''&mdash; ''']
[template indexterm1[term1] '''<indexterm><primary>'''[term1]'''</primary></indexterm>''']
[template indexterm2[term1 term2] '''<indexterm><primary>'''[term1]'''</primary><secondary>'''[term2]'''</secondary></indexterm>''']

[def __N3747__ [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3747.pdf [*N3747]]]
[def __N4588__ [@http://cplusplus.github.io/networking-ts/draft.pdf [*N4588]]]
[def __rfc6455__ [@https://tools.ietf.org/html/rfc6455 rfc6455]]
[def __rfc7230__ [@https://tools.ietf.org/html/rfc7230 rfc7230]]

[def __Asio__ [@http://www.boost.org/doc/html/boost_asio.html Boost.Asio]]

[def __asio_handler_invoke__    [@http://www.boost.org/doc/html/boost_asio/reference/asio_handler_invoke.html `asio_handler_invoke`]]
[def __asio_handler_allocate__  [@http://www.boost.org/doc/html/boost_asio/reference/asio_handler_allocate.html `asio_handler_allocate`]]
[def __void_or_deduced__        [@http://www.boost.org/doc/html/boost_asio/reference/asynchronous_operations.html#boost_asio.reference.asynchronous_operations.return_type_of_an_initiating_function ['void-or-deduced]]]
[def __use_future__             [@http://www.boost.org/doc/html/boost_asio/reference/use_future_t.html `boost::asio::use_future`]]
[def __yield_context__          [@http://www.boost.org/doc/html/boost_asio/reference/yield_context.html `boost::asio::yield_context`]]
[def __io_service__             [@http://www.boost.org/doc/html/boost_asio/reference/io_service.html `io_service`]]
[def __streambuf__              [@http://www.boost.org/doc/html/boost_asio/reference/streambuf.html [*boost::asio::streambuf]]]

[def __AsyncReadStream__        [@http://www.boost.org/doc/html/boost_asio/reference/AsyncReadStream.html [*AsyncReadStream]]]
[def __AsyncWriteStream__       [@http://www.boost.org/doc/html/boost_asio/reference/AsyncWriteStream.html [*AsyncWriteStream]]]
[def __CompletionHandler__      [@http://www.boost.org/doc/html/boost_asio/reference/CompletionHandler.html [*CompletionHandler]]]
[def __ConstBufferSequence__    [@http://www.boost.org/doc/html/boost_asio/reference/ConstBufferSequence.html [*ConstBufferSequence]]]
[def __Handler__                [@http://www.boost.org/doc/html/boost_asio/reference/Handler.html [*Handler]]]
[def __MutableBufferSequence__  [@http://www.boost.org/doc/html/boost_asio/reference/MutableBufferSequence.html [*MutableBufferSequence]]]
[def __SyncReadStream__         [@http://www.boost.org/doc/html/boost_asio/reference/SyncReadStream.html [*SyncReadStream]]]
[def __SyncWriteStream__        [@http://www.boost.org/doc/html/boost_asio/reference/SyncWriteStream.html [*SyncWriteStream]]]

[def __AsyncStream__        [link beast.ref.streams.AsyncStream [*AsyncStream]]]
[def __Body__               [link beast.ref.Body [*Body]]]
[def __DynamicBuffer__      [link beast.ref.DynamicBuffer [*DynamicBuffer]]]
[def __FieldSequence__      [link beast.ref.FieldSequence [*FieldSequence]]]
[def __Stream__             [link beast.ref.streams [*Stream]]]
[def __SyncStream__         [link beast.ref.streams.SyncStream [*SyncStream]]]

[def __basic_fields__       [link beast.ref.http__basic_fields `basic_fields`]]
[def __basic_multi_buffer__ [link beast.ref.basic_multi_buffer `basic_multi_buffer`]]
[def __basic_parser__       [link beast.ref.http__basic_parser `basic_parser`]]
[def __buffer_body__        [link beast.ref.http__buffer_body `buffer_body`]]
[def __fields__             [link beast.ref.http__fields `fields`]]
[def __flat_buffer__        [link beast.ref.flat_buffer `flat_buffer`]]
[def __header__             [link beast.ref.http__header `header`]]
[def __header_parser__      [link beast.ref.http__header_parser `header_parser`]]
[def __message__            [link beast.ref.http__message `message`]]
[def __multi_buffer__       [link beast.ref.multi_buffer `multi_buffer`]]
[def __parser__             [link beast.ref.http__parser `parser`]]
[def __serializer__         [link beast.ref.http__serializer `serializer`]]

Beast is a cross-platform, header-only C++11 library for low-level HTTP
and WebSocket protocol programming that uses the consistent network and
asynchronous model of __Asio__.

[variablelist
  [[
    [link beast.overview Overview]
  ][
    An explanation of requirements, audience, features, and credits.
  ]]
  [[
    [link beast.core Core Concepts]
  ][
    Library-wide concepts for working with buffers and streams.
  ]]
  [[
    [link beast.http Using HTTP]
  ][
    How to use the basic algorithms in your applications.
  ]]
  [[
    [link beast.websocket Using WebSocket]
  ][
    How to use the WebSocket interfaces in your applications.
  ]]
  [[
    [link beast.example Examples]
  ][
    Examples that illustrate usage for typical scenarios.
  ]]
  [[
    [link beast.design Design]
  ][
    Design rationale, answers to questions,
    library comparisons, and Boost Formal Review FAQ.
  ]]
  [[
    [link beast.ref Reference]
  ][
    Detailed class and function reference.
  ]]
  [[
    [link beast.index Index]
  ][
    Book-style text index of Beast documentation.
  ]]
]

[include 1_overview.qbk]
[include 2_core.qbk]
[include 3_0_http.qbk]
[include 4_websocket.qbk]
[include 5_examples.qbk]
[include 6_0_design.qbk]

[section:ref Reference]
[xinclude quickref.xml]
[include concept/Body.qbk]
[include concept/BodyReader.qbk]
[include concept/BodyWriter.qbk]
[include concept/BufferSequence.qbk]
[include concept/DynamicBuffer.qbk]
[include concept/Field.qbk]
[include concept/FieldSequence.qbk]
[include concept/Streams.qbk]
[include reference.qbk]
[endsect]

[xinclude index.xml]
