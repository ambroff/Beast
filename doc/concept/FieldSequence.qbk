[/
    Copyright (c) 2013-2017 Vinnie Falco (vinnie dot falco at gmail dot com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:FieldSequence FieldSequence]

A [*FieldSequence] is an iterable container whose value type meets
the requirements of [link beast.concept.Field [*Field]]. Objects that meet
these requirements become serializable by the implementation.

In this table:

* `X` denotes a type that meets the requirements of [*FieldSequence].

* `c` is a value of type `X const`.

[table FieldSequence requirements
[[expression][type][semantics, pre/post-conditions]]
[
    [`X::value_type`]
    []
    [
        A type that meets the requirements of
        [link beast.concept.Field [*Field]].
    ]
]
[
    [`X::const_iterator`]
    []
    [
        An iterator type whose `reference` type meets the
        requirements of [link beast.concept.Field [*Field]], and which
        satisfies all the requirements of [*ForwardIterator],
        except that:

        [ordered_list
            [there is no requirement that `operator->` is provided, and]
            [there is no requirement that `reference` be a reference type.]
        ]
    ]
]
[
    [`c.begin()`]
    [`X::const_iterator`]
    [
        Returns an iterator to the beginning of the field sequence.
    ]
]
[
    [`c.end()`]
    [`X::const_iterator`]
    [
        Returns an iterator to the end of the field sequence.
    ]
]
]

[endsect]



[/


[section:Fields Fields]

A type meeting the requirements of [*Fields] represents a container
used to store HTTP header fields.

In this table:

* `X` denotes a type that meets the requirements of [*Fields].

* `c` is a value of type `X const`.


[table FieldSequence requirements
[[expression][type][semantics, pre/post-conditions]]
[
    []
    []
    [
    ]
]
]

[endsect]

Operations we'd like to perform

Determine if a field exists
    bool exists(field f) const;
    bool exists(string_view s) const;
    
    iterator find(field f) const;
    iterator find(string_view s);


]
